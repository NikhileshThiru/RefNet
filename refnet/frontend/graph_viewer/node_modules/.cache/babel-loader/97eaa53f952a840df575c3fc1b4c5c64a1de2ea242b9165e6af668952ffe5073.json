{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilesh/Code/refnet/RefNet/refnet/frontend/graph_viewer/src/components/GraphViewerClean.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './GraphViewer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphViewerClean = ({\n  mockPapers,\n  mockCitations\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const simulationRef = useRef(null);\n  const [selectedPapers, setSelectedPapers] = useState(new Set());\n  const [showAIPanel, setShowAIPanel] = useState(false);\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n\n  // Update dimensions on window resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      var _svgRef$current;\n      const container = (_svgRef$current = svgRef.current) === null || _svgRef$current === void 0 ? void 0 : _svgRef$current.parentElement;\n      if (container) {\n        setDimensions({\n          width: container.clientWidth,\n          height: container.clientHeight\n        });\n      }\n    };\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n\n  // Create and update the graph - Clean D3 implementation\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height || mockPapers.length === 0) return;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove(); // Clear previous graph\n\n    // Create main group\n    const g = svg.append('g');\n\n    // Create zoom behavior\n    const zoom = d3.zoom().scaleExtent([0.1, 4]).on('zoom', event => {\n      g.attr('transform', event.transform);\n    });\n    svg.call(zoom);\n\n    // Prepare data\n    const nodes = mockPapers.map(paper => ({\n      id: paper.id,\n      title: paper.title,\n      authors: paper.authors,\n      year: paper.year,\n      citations: paper.citations\n    }));\n    const links = mockCitations.map(citation => ({\n      source: citation.source,\n      target: citation.target\n    }));\n\n    // Create force simulation\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id).distance(100)).force('charge', d3.forceManyBody().strength(-300)).force('center', d3.forceCenter(dimensions.width / 2, dimensions.height / 2));\n\n    // Store simulation reference\n    simulationRef.current = simulation;\n\n    // Create links\n    const link = g.append('g').attr('class', 'links').selectAll('line').data(links).enter().append('line').attr('stroke', '#999').attr('stroke-opacity', 0.6).attr('stroke-width', 1);\n\n    // Create nodes\n    const node = g.append('g').attr('class', 'nodes').selectAll('circle').data(nodes).enter().append('circle').attr('r', 8).attr('fill', d => selectedPapers.has(d.id) ? '#7c3aed' : '#3b82f6').attr('stroke', '#fff').attr('stroke-width', 2).style('cursor', 'pointer').call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));\n\n    // Add labels\n    const labels = g.append('g').attr('class', 'labels').selectAll('text').data(nodes).enter().append('text').attr('text-anchor', 'middle').attr('dy', 4).style('font-size', '10px').style('fill', '#333').style('pointer-events', 'none').text(d => {\n      var _d$authors$;\n      return `${((_d$authors$ = d.authors[0]) === null || _d$authors$ === void 0 ? void 0 : _d$authors$.split(' ')[0]) || 'Unknown'}, ${d.year}`;\n    });\n\n    // Update positions on tick\n    simulation.on('tick', () => {\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('cx', d => d.x).attr('cy', d => d.y);\n      labels.attr('x', d => d.x).attr('y', d => d.y);\n    });\n\n    // Drag functions\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    // Click handler\n    node.on('click', function (event, d) {\n      setSelectedPapers(prevSelected => {\n        const newSelected = new Set(prevSelected);\n        if (newSelected.has(d.id)) {\n          newSelected.delete(d.id);\n        } else {\n          newSelected.add(d.id);\n        }\n        return newSelected;\n      });\n    });\n\n    // Cleanup\n    return () => {\n      if (simulationRef.current) {\n        simulationRef.current.stop();\n      }\n    };\n  }, [mockPapers, mockCitations, dimensions, selectedPapers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: dimensions.width,\n        height: dimensions.height,\n        className: \"graph-svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), showAIPanel && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Papers (\", selectedPapers.size, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-papers\",\n        children: Array.from(selectedPapers).map(paperId => {\n          const paper = mockPapers.find(p => p.id === paperId);\n          return paper ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-paper\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: paper.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [paper.authors.join(', '), \" (\", paper.year, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Citations: \", paper.citations]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this)]\n          }, paperId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this) : null;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphViewerClean, \"pEeWC0P865jD8x2wKNBbMIWUCSA=\");\n_c = GraphViewerClean;\nexport default GraphViewerClean;\nvar _c;\n$RefreshReg$(_c, \"GraphViewerClean\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","jsxDEV","_jsxDEV","GraphViewerClean","mockPapers","mockCitations","_s","svgRef","simulationRef","selectedPapers","setSelectedPapers","Set","showAIPanel","setShowAIPanel","dimensions","setDimensions","width","height","updateDimensions","_svgRef$current","container","current","parentElement","clientWidth","clientHeight","window","addEventListener","removeEventListener","length","svg","select","selectAll","remove","g","append","zoom","scaleExtent","on","event","attr","transform","call","nodes","map","paper","id","title","authors","year","citations","links","citation","source","target","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","link","data","enter","node","has","style","drag","dragstarted","dragged","dragended","labels","text","_d$authors$","split","x","y","active","alphaTarget","restart","subject","fx","fy","prevSelected","newSelected","delete","add","stop","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","size","Array","from","paperId","find","p","join","_c","$RefreshReg$"],"sources":["/Users/nikhilesh/Code/refnet/RefNet/refnet/frontend/graph_viewer/src/components/GraphViewerClean.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './GraphViewer.css';\n\nconst GraphViewerClean = ({ mockPapers, mockCitations }) => {\n  const svgRef = useRef(null);\n  const simulationRef = useRef(null);\n  const [selectedPapers, setSelectedPapers] = useState(new Set());\n  const [showAIPanel, setShowAIPanel] = useState(false);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  // Update dimensions on window resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      const container = svgRef.current?.parentElement;\n      if (container) {\n        setDimensions({\n          width: container.clientWidth,\n          height: container.clientHeight\n        });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n\n  // Create and update the graph - Clean D3 implementation\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height || mockPapers.length === 0) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove(); // Clear previous graph\n\n    // Create main group\n    const g = svg.append('g');\n\n    // Create zoom behavior\n    const zoom = d3.zoom()\n      .scaleExtent([0.1, 4])\n      .on('zoom', (event) => {\n        g.attr('transform', event.transform);\n      });\n\n    svg.call(zoom);\n\n    // Prepare data\n    const nodes = mockPapers.map(paper => ({\n      id: paper.id,\n      title: paper.title,\n      authors: paper.authors,\n      year: paper.year,\n      citations: paper.citations\n    }));\n\n    const links = mockCitations.map(citation => ({\n      source: citation.source,\n      target: citation.target\n    }));\n\n    // Create force simulation\n    const simulation = d3.forceSimulation(nodes)\n      .force('link', d3.forceLink(links).id(d => d.id).distance(100))\n      .force('charge', d3.forceManyBody().strength(-300))\n      .force('center', d3.forceCenter(dimensions.width / 2, dimensions.height / 2));\n\n    // Store simulation reference\n    simulationRef.current = simulation;\n\n    // Create links\n    const link = g.append('g')\n      .attr('class', 'links')\n      .selectAll('line')\n      .data(links)\n      .enter().append('line')\n      .attr('stroke', '#999')\n      .attr('stroke-opacity', 0.6)\n      .attr('stroke-width', 1);\n\n    // Create nodes\n    const node = g.append('g')\n      .attr('class', 'nodes')\n      .selectAll('circle')\n      .data(nodes)\n      .enter().append('circle')\n      .attr('r', 8)\n      .attr('fill', d => selectedPapers.has(d.id) ? '#7c3aed' : '#3b82f6')\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 2)\n      .style('cursor', 'pointer')\n      .call(d3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended));\n\n    // Add labels\n    const labels = g.append('g')\n      .attr('class', 'labels')\n      .selectAll('text')\n      .data(nodes)\n      .enter().append('text')\n      .attr('text-anchor', 'middle')\n      .attr('dy', 4)\n      .style('font-size', '10px')\n      .style('fill', '#333')\n      .style('pointer-events', 'none')\n      .text(d => `${d.authors[0]?.split(' ')[0] || 'Unknown'}, ${d.year}`);\n\n    // Update positions on tick\n    simulation.on('tick', () => {\n      link\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n\n      node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n\n      labels\n        .attr('x', d => d.x)\n        .attr('y', d => d.y);\n    });\n\n    // Drag functions\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    // Click handler\n    node.on('click', function(event, d) {\n      setSelectedPapers(prevSelected => {\n        const newSelected = new Set(prevSelected);\n        if (newSelected.has(d.id)) {\n          newSelected.delete(d.id);\n        } else {\n          newSelected.add(d.id);\n        }\n        return newSelected;\n      });\n    });\n\n    // Cleanup\n    return () => {\n      if (simulationRef.current) {\n        simulationRef.current.stop();\n      }\n    };\n  }, [mockPapers, mockCitations, dimensions, selectedPapers]);\n\n  return (\n    <div className=\"graph-viewer\">\n      <div className=\"graph-container\">\n        <svg\n          ref={svgRef}\n          width={dimensions.width}\n          height={dimensions.height}\n          className=\"graph-svg\"\n        />\n      </div>\n      \n      {showAIPanel && (\n        <div className=\"ai-panel\">\n          <h3>Selected Papers ({selectedPapers.size})</h3>\n          <div className=\"selected-papers\">\n            {Array.from(selectedPapers).map(paperId => {\n              const paper = mockPapers.find(p => p.id === paperId);\n              return paper ? (\n                <div key={paperId} className=\"selected-paper\">\n                  <h4>{paper.title}</h4>\n                  <p>{paper.authors.join(', ')} ({paper.year})</p>\n                  <p>Citations: {paper.citations}</p>\n                </div>\n              ) : null;\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GraphViewerClean;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}