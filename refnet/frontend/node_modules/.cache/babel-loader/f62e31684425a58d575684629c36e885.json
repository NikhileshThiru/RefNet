{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const searchAPI = {\n  // Search for research papers\n  searchPapers: async (query, page = 1, perPage = 25, sortBy = 'cited_by_count') => {\n    const params = {\n      q: query,\n      page,\n      per_page: perPage,\n      sort: sortBy\n    };\n    const response = await api.get('/search', {\n      params\n    });\n    return response.data;\n  }\n};\nexport const paperAPI = {\n  // Get paper details by ID\n  getPaper: async paperId => {\n    const response = await api.get(`/paper/${paperId}`);\n    return response.data;\n  },\n  // Get paper citations\n  getCitations: async paperId => {\n    const response = await api.get(`/paper/${paperId}/citations`);\n    return response.data;\n  },\n  // Get paper references\n  getReferences: async paperId => {\n    const response = await api.get(`/paper/${paperId}/references`);\n    return response.data;\n  }\n};\nexport const graphAPI = {\n  // Build graph from a paper\n  buildGraph: async (paperId, iterations = 3, citedLimit = 5, refLimit = 5) => {\n    const params = {\n      iterations,\n      cited_limit: citedLimit,\n      ref_limit: refLimit\n    };\n    const response = await api.get(`/graph/${paperId}`, {\n      params\n    });\n    return response.data;\n  },\n  // Build graph from multiple papers\n  buildMultipleGraph: async (paperIds, iterations = 3, citedLimit = 5, refLimit = 5) => {\n    const data = {\n      paper_ids: paperIds,\n      iterations,\n      cited_limit: citedLimit,\n      ref_limit: refLimit\n    };\n    const response = await api.post('/graph/multiple', data);\n    return response.data;\n  },\n  // Get graph neighbors\n  getNeighbors: async paperId => {\n    const response = await api.get(`/graph/${paperId}/neighbors`);\n    return response.data;\n  },\n  // Get graph statistics\n  getStats: async () => {\n    const response = await api.get('/graph/stats');\n    return response.data;\n  },\n  // Get graph data\n  getData: async () => {\n    const response = await api.get('/graph/data');\n    return response.data;\n  },\n  // Clear graph\n  clearGraph: async () => {\n    const response = await api.post('/graph/clear');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","searchAPI","searchPapers","query","page","perPage","sortBy","params","q","per_page","sort","get","paperAPI","getPaper","paperId","getCitations","getReferences","graphAPI","buildGraph","iterations","citedLimit","refLimit","cited_limit","ref_limit","buildMultipleGraph","paperIds","paper_ids","post","getNeighbors","getStats","getData","clearGraph"],"sources":["/Users/dhruvachayapathy/Projects/RefNet/refnet/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const searchAPI = {\n  // Search for research papers\n  searchPapers: async (query, page = 1, perPage = 25, sortBy = 'cited_by_count') => {\n    const params = {\n      q: query,\n      page,\n      per_page: perPage,\n      sort: sortBy\n    };\n    \n    const response = await api.get('/search', { params });\n    return response.data;\n  }\n};\n\nexport const paperAPI = {\n  // Get paper details by ID\n  getPaper: async (paperId) => {\n    const response = await api.get(`/paper/${paperId}`);\n    return response.data;\n  },\n\n  // Get paper citations\n  getCitations: async (paperId) => {\n    const response = await api.get(`/paper/${paperId}/citations`);\n    return response.data;\n  },\n\n  // Get paper references\n  getReferences: async (paperId) => {\n    const response = await api.get(`/paper/${paperId}/references`);\n    return response.data;\n  }\n};\n\nexport const graphAPI = {\n  // Build graph from a paper\n  buildGraph: async (paperId, iterations = 3, citedLimit = 5, refLimit = 5) => {\n    const params = {\n      iterations,\n      cited_limit: citedLimit,\n      ref_limit: refLimit\n    };\n    \n    const response = await api.get(`/graph/${paperId}`, { params });\n    return response.data;\n  },\n\n  // Build graph from multiple papers\n  buildMultipleGraph: async (paperIds, iterations = 3, citedLimit = 5, refLimit = 5) => {\n    const data = {\n      paper_ids: paperIds,\n      iterations,\n      cited_limit: citedLimit,\n      ref_limit: refLimit\n    };\n    \n    const response = await api.post('/graph/multiple', data);\n    return response.data;\n  },\n\n  // Get graph neighbors\n  getNeighbors: async (paperId) => {\n    const response = await api.get(`/graph/${paperId}/neighbors`);\n    return response.data;\n  },\n\n  // Get graph statistics\n  getStats: async () => {\n    const response = await api.get('/graph/stats');\n    return response.data;\n  },\n\n  // Get graph data\n  getData: async () => {\n    const response = await api.get('/graph/data');\n    return response.data;\n  },\n\n  // Clear graph\n  clearGraph: async () => {\n    const response = await api.post('/graph/clear');\n    return response.data;\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}